// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6504.MyRobot.subsystems;

import org.usfirst.frc6504.MyRobot.RobotMap;
import org.usfirst.frc6504.MyRobot.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.drive.MecanumDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController frontLeft = RobotMap.driveTrainFrontLeft;
    private final SpeedController backLeft = RobotMap.driveTrainBackLeft;
    private final SpeedController frontRight = RobotMap.driveTrainFrontRight;
    private final SpeedController backRight = RobotMap.driveTrainBackRight;
    private final MecanumDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final AnalogGyro myGyro = RobotMap.driveTrainMyGyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    //Xbox axes method to steer; simulating z-axis
    public void takeXboxInput(Joystick XboxSticks) {
    	double zAxis = (XboxSticks.getRawAxis(3) - XboxSticks.getRawAxis(2))/1.5;
    	robotDrive.driveCartesian(XboxSticks.getX()/2.0, -XboxSticks.getY()/1.5,
    			XboxSticks.getRawAxis(4)/2.0);
<<<<<<< HEAD
=======
    	
>>>>>>> c83a3847fcf1d8d2528622470f17c78dd1ba4329
    }
    
    //Logitech axis method to steer
    /*public void takeLogitechInput(Joystick logitechStick) {
	  robotDrive.driveCartesian(-logitechStick.getX(), -logitechStick.getY(),
			-logitechStick.getZ(), RobotMap.gyro.getAngle());
    } */
    
    //Stop method
    public void stop() {
    	frontLeft.set(0);  
    	backLeft.set(0);
    	frontRight.set(0);
    	backRight.set(0);
    }
}

